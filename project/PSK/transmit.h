//==========================================================================================
// Filename:		transmit.h
//
// Description:		Power-Line Communication header file.
//					Contains compilation flags.
//					Contains typedefs for variable types
//					Contains structure definitions.
//					Contains function prototypes for all functions.
//					Contains global variables.
//					Contains global constants.
//					Contains macros.
//
// Copyright (C) 2004 Texas Instruments Incorporated
// Texas Instruments Proprietary Information
// Use subject to terms and conditions of TI Software License Agreement
//
// Revision History:	MOVED TO END OF FILE!
//==========================================================================================


#ifndef plc_h							// Header file guard
#define plc_h


//==========================================================================================
// Compilation Flags
//==========================================================================================


//==========================================================================================
// Global Type Definitions
//==========================================================================================


//==========================================================================================
// System #include files <filename.h>
// Application #includes "filename.h"
//==========================================================================================
//#ifdef __cplusplus
//	#include <cstdlib>		// C++ standard library
//#endif

//#include "DSP28_Device.h"	// DSP28 general file. device #includes, register definitions.
#include "prototypes.h"		// global prototype declarations.


//==========================================================================================
// Global Constants - General purpose constants
//==========================================================================================
#define SUCCESS			(0)			// Return code for success.

//==========================================================================================
// Global Constants - Related to hardware. Register bits, ...
//==========================================================================================
//#define	TX_MODE		1
//#define	RX_MODE		2


//==========================================================================================
// Bit masks for Flag Registers
//==========================================================================================


//==========================================================================================
// Command Specific constants.
//==========================================================================================
// Read Memory
#define RM_ADDR_MAX						(28)			// Max count in address mode
														//	(set by available parms)
// Write Memory
#define WM_ADDR_MAX						(14)			// Max count in address/enum mode


//==========================================================================================
// Macros
//==========================================================================================

								   
//==========================================================================================
// Global Variables declarations.  (matching definitions found in "vardefs.h")
//==========================================================================================

extern u16	T1PIntCount;		// EV Timer1 Period Interrupt counts
extern u16	txBitPending;		// Flag to indicate that a transmit bit is ready to be sent
extern u16	txBitNext;			// Value of next bit to be sent via PLC


//extern u16	uFIROutIndex;				// Index into FIR output buffers
//extern q16	qFIROutP[FIR_OUT_LEN];		// Primary FIR output buffer	
//extern q16	qFIROutQ[FIR_OUT_LEN];		// Quadrature FIR output buffer
//extern q32	qlFIROut[FIR_OUT_LEN];	// FIR outputs: Primary in high word, Quadrature in low word
//extern q16	qFIROutOld[FIR_OUT_LEN];	// Delayed copy of FIR output
//extern q32	qlRxRawBuff[FIR_LEN];	// Array with most recent raw data
//extern q32* pRxRaw;					// Pointer into RxRawBuff
//extern u16	uCorrOutIndex;			// Index into correlation output array
//extern q32	qlCorrOut[CORR_OUT_LEN];// Correlation output filter
//extern q32	qlSumCorrOut;			// Sum of most recent period of correlation output filter
extern u16 uRxModeCount;				// Number of negative values seen in the correlation output
//==========================================================================================

const u16	uParityTable[256] = {	0x0140,	0x0500,	0x01C0,	0x0580,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x0580,	0x01C0,	0x0500,	0x0140,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0140,	0x0500,	0x01C0,	0x0580,
							0x0500,	0x0140,	0x0580,	0x01C0,
							0x01C0,	0x0580,	0x0140,	0x0500,
							0x0580,	0x01C0,	0x0500,	0x0140	};

	// Transmitter pre-code table.  
	// Pre-codes data so that differential detector spits out data directly.
	// Also appends parity bit and two start/stop bits. 
	// Input = 8 bits of user data.  Output = Top 11 bits.
//#define TXDIFF
#ifdef TXDIFF	
	const u16	uTxPrecodeTable[256] = 
	{
		0x5520, 0x54A0,	0x5620,	0x57A0,	0x52A0,	0x5320,	0x51A0,	0x5020,	
		0x5A20,	0x5BA0,	0x5920,	0x58A0,	0x5DA0,	0x5C20,	0x5EA0,	0x5F20,	
		0x4AA0,	0x4B20,	0x49A0,	0x4820,	0x4D20,	0x4CA0,	0x4E20,	0x4FA0,	
		0x45A0,	0x4420,	0x46A0,	0x4720,	0x4220,	0x43A0,	0x4120,	0x40A0,	
		0x6A20,	0x6BA0,	0x6920,	0x68A0,	0x6DA0,	0x6C20,	0x6EA0,	0x6F20,	
		0x6520,	0x64A0,	0x6620,	0x67A0,	0x62A0,	0x6320,	0x61A0,	0x6020,	
		0x75A0,	0x7420,	0x76A0,	0x7720,	0x7220,	0x73A0,	0x7120,	0x70A0,	
		0x7AA0,	0x7B20,	0x79A0,	0x7820,	0x7D20,	0x7CA0,	0x7E20,	0x7FA0,	
		0x2AA0,	0x2B20,	0x29A0,	0x2820,	0x2D20,	0x2CA0,	0x2E20,	0x2FA0,	
		0x25A0,	0x2420,	0x26A0,	0x2720,	0x2220,	0x23A0,	0x2120,	0x20A0,	
		0x3520,	0x34A0,	0x3620,	0x37A0,	0x32A0,	0x3320,	0x31A0,	0x3020,	
		0x3A20,	0x3BA0,	0x3920,	0x38A0,	0x3DA0,	0x3C20,	0x3EA0,	0x3F20,	
		0x15A0,	0x1420,	0x16A0,	0x1720,	0x1220,	0x13A0,	0x1120,	0x10A0,	
		0x1AA0,	0x1B20,	0x19A0,	0x1820,	0x1D20,	0x1CA0,	0x1E20,	0x1FA0,	
		0x0A20,	0x0BA0,	0x0920,	0x08A0,	0x0DA0,	0x0C20,	0x0EA0,	0x0F20,	
		0x0520,	0x04A0,	0x0620,	0x07A0,	0x02A0,	0x0320,	0x01A0,	0x0020,	
		0xAA20,	0xABA0,	0xA920,	0xA8A0,	0xADA0,	0xAC20,	0xAEA0,	0xAF20,	
		0xA520,	0xA4A0,	0xA620,	0xA7A0,	0xA2A0,	0xA320,	0xA1A0,	0xA020,	
		0xB5A0,	0xB420,	0xB6A0,	0xB720,	0xB220,	0xB3A0,	0xB120,	0xB0A0,	
		0xBAA0,	0xBB20,	0xB9A0,	0xB820,	0xBD20,	0xBCA0,	0xBE20,	0xBFA0,	
		0x9520,	0x94A0,	0x9620,	0x97A0,	0x92A0,	0x9320,	0x91A0,	0x9020,	
		0x9A20,	0x9BA0,	0x9920,	0x98A0,	0x9DA0,	0x9C20,	0x9EA0,	0x9F20,	
		0x8AA0,	0x8B20,	0x89A0,	0x8820,	0x8D20,	0x8CA0,	0x8E20,	0x8FA0,	
		0x85A0,	0x8420,	0x86A0,	0x8720,	0x8220,	0x83A0,	0x8120,	0x80A0,	
		0xD5A0,	0xD420,	0xD6A0,	0xD720,	0xD220,	0xD3A0,	0xD120,	0xD0A0,	
		0xDAA0,	0xDB20,	0xD9A0,	0xD820,	0xDD20,	0xDCA0,	0xDE20,	0xDFA0,	
		0xCA20,	0xCBA0,	0xC920,	0xC8A0,	0xCDA0,	0xCC20,	0xCEA0,	0xCF20,	
		0xC520,	0xC4A0,	0xC620,	0xC7A0,	0xC2A0,	0xC320,	0xC1A0,	0xC020,	
		0xEAA0,	0xEB20,	0xE9A0,	0xE820,	0xED20,	0xECA0,	0xEE20,	0xEFA0,	
		0xE5A0,	0xE420,	0xE6A0,	0xE720,	0xE220,	0xE3A0,	0xE120,	0xE0A0,	
		0xF520,	0xF4A0,	0xF620,	0xF7A0,	0xF2A0,	0xF320,	0xF1A0,	0xF020,	
		0xFA20,	0xFBA0,	0xF920,	0xF8A0,	0xFDA0,	0xFC20,	0xFEA0,	0xFF20
	};
								
#else								
	const u16 	uTxPrecodeTable[256] = 
	{
	  0x0020,  0x01A0,  0x02A0,  0x0320,  0x04A0,  0x0520,  0x0620,  0x07A0,
	  0x08A0,  0x0920,  0x0A20,  0x0BA0,  0x0C20,  0x0DA0,  0x0EA0,  0x0F20,
	  0x10A0,  0x1120,  0x1220,  0x13A0,  0x1420,  0x15A0,  0x16A0,  0x1720,
	  0x1820,  0x19A0,  0x1AA0,  0x1B20,  0x1CA0,  0x1D20,  0x1E20,  0x1FA0,
	  0x20A0,  0x2120,  0x2220,  0x23A0,  0x2420,  0x25A0,  0x26A0,  0x2720,
	  0x2820,  0x29A0,  0x2AA0,  0x2B20,  0x2CA0,  0x2D20,  0x2E20,  0x2FA0,
	  0x3020,  0x31A0,  0x32A0,  0x3320,  0x34A0,  0x3520,  0x3620,  0x37A0,
	  0x38A0,  0x3920,  0x3A20,  0x3BA0,  0x3C20,  0x3DA0,  0x3EA0,  0x3F20,
	  0x40A0,  0x4120,  0x4220,  0x43A0,  0x4420,  0x45A0,  0x46A0,  0x4720,
	  0x4820,  0x49A0,  0x4AA0,  0x4B20,  0x4CA0,  0x4D20,  0x4E20,  0x4FA0,
	  0x5020,  0x51A0,  0x52A0,  0x5320,  0x54A0,  0x5520,  0x5620,  0x57A0,
	  0x58A0,  0x5920,  0x5A20,  0x5BA0,  0x5C20,  0x5DA0,  0x5EA0,  0x5F20,
	  0x6020,  0x61A0,  0x62A0,  0x6320,  0x64A0,  0x6520,  0x6620,  0x67A0,
	  0x68A0,  0x6920,  0x6A20,  0x6BA0,  0x6C20,  0x6DA0,  0x6EA0,  0x6F20,
	  0x70A0,  0x7120,  0x7220,  0x73A0,  0x7420,  0x75A0,  0x76A0,  0x7720,
	  0x7820,  0x79A0,  0x7AA0,  0x7B20,  0x7CA0,  0x7D20,  0x7E20,  0x7FA0,
	  0x80A0,  0x8120,  0x8220,  0x83A0,  0x8420,  0x85A0,  0x86A0,  0x8720,
	  0x8820,  0x89A0,  0x8AA0,  0x8B20,  0x8CA0,  0x8D20,  0x8E20,  0x8FA0,
	  0x9020,  0x91A0,  0x92A0,  0x9320,  0x94A0,  0x9520,  0x9620,  0x97A0,
	  0x98A0,  0x9920,  0x9A20,  0x9BA0,  0x9C20,  0x9DA0,  0x9EA0,  0x9F20,
	  0xA020,  0xA1A0,  0xA2A0,  0xA320,  0xA4A0,  0xA520,  0xA620,  0xA7A0,
	  0xA8A0,  0xA920,  0xAA20,  0xABA0,  0xAC20,  0xADA0,  0xAEA0,  0xAF20,
	  0xB0A0,  0xB120,  0xB220,  0xB3A0,  0xB420,  0xB5A0,  0xB6A0,  0xB720,
	  0xB820,  0xB9A0,  0xBAA0,  0xBB20,  0xBCA0,  0xBD20,  0xBE20,  0xBFA0,
	  0xC020,  0xC1A0,  0xC2A0,  0xC320,  0xC4A0,  0xC520,  0xC620,  0xC7A0,
	  0xC8A0,  0xC920,  0xCA20,  0xCBA0,  0xCC20,  0xCDA0,  0xCEA0,  0xCF20,
	  0xD0A0,  0xD120,  0xD220,  0xD3A0,  0xD420,  0xD5A0,  0xD6A0,  0xD720,
	  0xD820,  0xD9A0,  0xDAA0,  0xDB20,  0xDCA0,  0xDD20,  0xDE20,  0xDFA0,
	  0xE0A0,  0xE120,  0xE220,  0xE3A0,  0xE420,  0xE5A0,  0xE6A0,  0xE720,
	  0xE820,  0xE9A0,  0xEAA0,  0xEB20,  0xECA0,  0xED20,  0xEE20,  0xEFA0,
	  0xF020,  0xF1A0,  0xF2A0,  0xF320,  0xF4A0,  0xF520,  0xF620,  0xF7A0,
	  0xF8A0,  0xF920,  0xFA20,  0xFBA0,  0xFC20,  0xFDA0,  0xFEA0,  0xFF20
	};
#endif



const q32	qlFIRTaps[FIR_LEN] = 
{
 	(     0L<<8<<8) |(      16383), //	 0.00000	   1.00000
	(  4074L<<8<<8) |(      15868), //	 0.24869	   0.96858
	(  7893L<<8<<8) |(      14357), //	 0.48175	   0.87631
	( 11215L<<8<<8) |(      11943), //	 0.68455	   0.72897
	( 13833L<<8<<8) |(       8778), //	 0.84433	   0.53583
	( 15581L<<8<<8) |(       5063), //	 0.95106	   0.30902
	( 16351L<<8<<8) |(       1029), //	 0.99803	   0.06279
	( 16093L<<8<<8) |(65536 -3070), //	 0.98229	  -0.18738
	( 14824L<<8<<8) |(65536 -6976), //	 0.90483	  -0.42578
	( 12623L<<8<<8) |(65536-10443), //	 0.77051	  -0.63742
	(  9630L<<8<<8) |(65536-13254), //	 0.58779	  -0.80902
	(  6031L<<8<<8) |(65536-15233), //	 0.36812	  -0.92978
	(  2053L<<8<<8) |(65536-16254), //	 0.12533	  -0.99211
	( -2053L<<8<<8) |(65536-16254), //	-0.12533	  -0.99211
	( -6031L<<8<<8) |(65536-15233), //	-0.36812	  -0.92978
	( -9630L<<8<<8) |(65536-13254), //	-0.58779	  -0.80902
	(-12623L<<8<<8) |(65536-10443), //	-0.77051	  -0.63742
	(-14824L<<8<<8) |(65536 -6976), //	-0.90483	  -0.42578
	(-16093L<<8<<8) |(65536 -3070), //	-0.98229	  -0.18738
	(-16351L<<8<<8) |(       1029), //	-0.99803	   0.06279
	(-15581L<<8<<8) |(       5063), //	-0.95106	   0.30902
	(-13833L<<8<<8) |(       8778), //	-0.84433	   0.53583
	(-11215L<<8<<8) |(      11943), //	-0.68455	   0.72897
	( -7893L<<8<<8) |(      14357), //	-0.48175	   0.87631
	( -4074L<<8<<8) |(      15868)  //	-0.24869	   0.96858	
};




/*==========================================================================================
  Function:		SaveTrace()

  Description: 	This function stores data to the trace buffer 

  Revision History:
  06/07/04	HEM		New Function.  
  02/14/05	Hagen	Added to datadet.h
  07Mar05	Hagen	made the same as version in detData.h
==========================================================================================*/
#if TRACE_BUF_LEN > 0

	#ifdef DSP_COMPILE
	void inline SaveTrace(u16 uData)
	{
		upTraceBuffer[uTraceIndex++] = uData;
	
		if (uTraceIndex >= (((u16)(TRACE_BUF_LEN/4))*4))
			uTraceIndex = 0;
	}
	#endif
	
	// for MEX_COMPILE SaveTrace() is a macro defined in psk_macros.h
	
#endif





#endif									// End of header guard: #ifndef main_h


//==========================================================================================
// Revision History:
//
// 04/15/04	HEM		New file.
// 11/17/04	HEM		Removed rxBitPending.
// 11/19/04	HEM		Moved ADCIntCount to main.h.
// 07Mar05	Hagen	Made SaveTrace() same as in detData.h
//==========================================================================================













